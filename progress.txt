This is a simple file use to store the progess and steps made for this web service.

First application I will work towards is the authorization step. Users will create an account
or sign in. Creating an account will prompt the user with multiple things that will be stored in the users db.
1. Username
2. Password (I want to do hash but I dont rly remember how to do so)
3. Sizes (This is the entire premise of the application so I will ask users some basic sizes)
    a. Top size (range)
    b. Pants waist (range)
    c. Pants length (range)
    d. Shoe size
    This will be all for now
4. Gender they will be shopping for

First I will create a db that can store all this information and call it users.

Now that I have created the db alongside the read/read-write user access, my next step
Is to create a client file where I can call certain lambda functions

I have created the basics of the client to be prompted, I now will work on the first lambda function
Which is the authorization function. This will allow a user to log in and return a token that will
eventually expire but until it does gives users the ability to check out the catalog.

I refurbished the old authorize lambda function that was given to us by joseph hummel to fit with my db.
I do feel like I could have put more effort into that, but thats not the beauty of my project.
The beauty is the sql db calls alongside the webscrapping lambda function that I am scared to make.

Now I will be working on a making account feature, the premise is very simple.
Function will prompt user with a few questions and limited answers that they user can pick from.

I finally was able to implement creating a user and validting the inputs that they provided.
its 10:30 on a saturday im gonna kms, bed time now. Tmrw I will work on editing user stats, which will
use this helper function for sure
"
VALID_TOP_SIZES = {'XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', '3XL'}
VALID_GENDERS = {'M', 'F', 'Other'}
MIN_PANTS_WAIST, MAX_PANTS_WAIST = 24, 50
MIN_PANTS_LENGTH, MAX_PANTS_LENGTH = 26, 40
MIN_SHOE_SIZE, MAX_SHOE_SIZE = 4.0, 14.0  # Shoe size is a float

REQUIRED_FIELDS = {"username", "password", "top_size", "pants_waist", "pants_length", "shoe_size", "gender"}

def validate_user_input(body):
    # Ensure all required parameters are present
    missing_fields = REQUIRED_FIELDS - body.keys()
    if missing_fields:
        return api_utils.error(400, f"Missing parameters: {', '.join(missing_fields)}")

    # Validate top_size
    if body["top_size"] not in VALID_TOP_SIZES:
        return api_utils.error(400, f"Invalid top size: {body['top_size']}")

    # Validate numeric fields
    try:
        pants_waist = int(body["pants_waist"])
        pants_length = int(body["pants_length"])
        shoe_size = float(body["shoe_size"])
    except ValueError:
        return api_utils.error(400, "One or more numeric fields are not valid numbers")

    # Range checks
    if not (MIN_PANTS_WAIST <= pants_waist <= MAX_PANTS_WAIST):
        return api_utils.error(400, f"Invalid pants waist: {pants_waist}")
    if not (MIN_PANTS_LENGTH <= pants_length <= MAX_PANTS_LENGTH):
        return api_utils.error(400, f"Invalid pants length: {pants_length}")
    if not (MIN_SHOE_SIZE <= shoe_size <= MAX_SHOE_SIZE and shoe_size * 2 == round(shoe_size * 2)):
        return api_utils.error(400, f"Invalid shoe size: {shoe_size}")

    # Validate gender
    if body["gender"] not in VALID_GENDERS:
        return api_utils.error(400, f"Invalid gender: {body['gender']}")

    return None  # No errors
"

and also attempt to dive a bit in the scrapping, I have all week to do this, so hopefully I can do this.
night time